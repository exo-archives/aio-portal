Index: assembly/pom.xml
===================================================================
--- assembly/pom.xml	(revision 749233)
+++ assembly/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-parent</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
     <relativePath>../java/pom.xml</relativePath>
   </parent>
 
Index: java/social-api/src/test/java/org/apache/shindig/social/core/config/SocialApiGuiceModuleTest.java
===================================================================
--- java/social-api/src/test/java/org/apache/shindig/social/core/config/SocialApiGuiceModuleTest.java	(revision 749233)
+++ java/social-api/src/test/java/org/apache/shindig/social/core/config/SocialApiGuiceModuleTest.java	(working copy)
@@ -17,33 +17,98 @@
  */
 package org.apache.shindig.social.core.config;
 
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+
+import junit.framework.TestCase;
+
 import org.apache.shindig.auth.AuthenticationHandler;
+import org.apache.shindig.common.ContainerConfig;
+import org.apache.shindig.common.ContainerConfigException;
 import org.apache.shindig.common.PropertiesModule;
 import org.apache.shindig.social.core.oauth.AuthenticationHandlerProvider;
+import org.apache.shindig.social.core.util.ContainerConf;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
 
+import com.google.common.collect.Maps;
+import com.google.inject.AbstractModule;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 import com.google.inject.Key;
 import com.google.inject.TypeLiteral;
 
-import junit.framework.TestCase;
-
-import java.util.List;
-
 public class SocialApiGuiceModuleTest extends TestCase {
   private Injector injector;
 
   @Override public void setUp() throws Exception {
     super.setUp();
-    injector = Guice.createInjector(new SocialApiGuiceModule(), new PropertiesModule());
+    System.out.println("plop");
+    injector = Guice.createInjector(new ConfigModule(), new SocialApiGuiceModule(), new PropertiesModule());
   }
+  
+  protected static class FakeContainerConfig implements ContainerConfig {
+    private final Map<String, String> properties = Maps.newHashMap();
+    
+    public String get(String container, String property) {
+      if(property.equals("gadgets.securityTokenType")) return "insecure";
+      return properties.get(property);
+    }
 
+    public Collection<String> getContainers() {
+      return null;
+    }
+
+    public Object getJson(String container, String parameter) {
+      return null;
+    }
+
+    public JSONArray getJsonArray(String container, String parameter) {
+      return null;
+    }
+
+    public JSONObject getJsonObject(String container, String parameter) {
+      if (parameter.equals("gadgets.content-rewrite")) {
+        try {
+        JSONObject jsonObject = new JSONObject();
+        JSONArray tags = new JSONArray();
+        tags.put("embed");
+        tags.put("img");
+        tags.put("script");
+        tags.put("link");
+        tags.put("style");
+        jsonObject.put("include-tags", tags);
+        jsonObject.put("include-urls", ".*");
+        jsonObject.put("exclude-urls", "");
+        jsonObject.put("expires", "HTTP");
+        jsonObject.put("proxy-url", "http://www.test.com/dir/proxy?url=");
+        jsonObject.put("concat-url", "http://www.test.com/dir/concat?");
+        return jsonObject;
+        } catch (JSONException e) {}
+      }
+      return null;
+    }
+  }
+  
+  public class ConfigModule extends AbstractModule {
+    /**
+     * {@InheritDoc}
+     */
+    @Override
+    protected void configure() {
+      bind(ContainerConfig.class).to(FakeContainerConfig.class);
+    }
+  }
+  
+  
+
   /**
    * Test default auth handler injection
    */
   public void testAuthHandler() {
     injector.getInstance(AuthenticationHandlerProvider.class).get();
-
     AuthenticationHandlerProvider provider =
         injector.getInstance(AuthenticationHandlerProvider.class);
     assertEquals(3, provider.get().size());
Index: java/social-api/pom.xml
===================================================================
--- java/social-api/pom.xml	(revision 749233)
+++ java/social-api/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-parent</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
Index: java/samples/pom.xml
===================================================================
--- java/samples/pom.xml	(revision 749233)
+++ java/samples/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-parent</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
Index: java/server/pom.xml
===================================================================
--- java/server/pom.xml	(revision 749233)
+++ java/server/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-parent</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -117,14 +117,17 @@
     <dependency>
       <groupId>org.apache.shindig</groupId>
       <artifactId>shindig-gadgets</artifactId>
+      <scope>provided</scope>
     </dependency>
     <dependency>
       <groupId>org.apache.shindig</groupId>
       <artifactId>shindig-social-api</artifactId>
+      <scope>provided</scope>
     </dependency>
     <dependency>
       <groupId>org.apache.shindig</groupId>
       <artifactId>shindig-features</artifactId>
+      <scope>provided</scope>
     </dependency>
 
     <!-- external dependencies -->
Index: java/common/pom.xml
===================================================================
--- java/common/pom.xml	(revision 749233)
+++ java/common/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-parent</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -49,13 +49,13 @@
       </plugin>
     </plugins>
     <resources>
-      <resource>
+      <!--resource>
         <targetPath>containers/default</targetPath>
         <directory>${basedir}/../../config</directory>
         <includes>
           <include>container.js</include>
         </includes>
-      </resource>
+      </resource-->
       <resource>
         <directory>src/main/bundle</directory>
         <includes>
Index: java/pom.xml
===================================================================
--- java/pom.xml	(revision 749233)
+++ java/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-project</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
   </parent>
 
   <artifactId>shindig-parent</artifactId>
Index: java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriterTest.java
===================================================================
--- java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriterTest.java	(revision 749233)
+++ java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriterTest.java	(working copy)
@@ -34,9 +34,9 @@
     super.setUp();
     ContentRewriterFeature overrideFeature =
         rewriterFeatureFactory.get(createSpecWithRewrite(".*", ".*exclude.*", "HTTP",
-            HTMLContentRewriter.TAGS));
+            HTMLContentRewriter.TAGS), DEFAULT_CONTAINER);
     ContentRewriterFeatureFactory factory = mockContentRewriterFeatureFactory(overrideFeature);
-    rewriter = new HTMLContentRewriter(factory, DEFAULT_PROXY_BASE, DEFAULT_CONCAT_BASE);
+    rewriter = new HTMLContentRewriter(factory, new FakeContainerConfig());
 
   }
 
Index: java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/CSSContentRewriterTest.java
===================================================================
--- java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/CSSContentRewriterTest.java	(revision 749233)
+++ java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/CSSContentRewriterTest.java	(working copy)
@@ -36,9 +36,9 @@
     super.setUp();
     ContentRewriterFeature overrideFeature =
         rewriterFeatureFactory.get(createSpecWithRewrite(".*", ".*exclude.*", "HTTP",
-            HTMLContentRewriter.TAGS));
+            HTMLContentRewriter.TAGS), DEFAULT_CONTAINER);
     ContentRewriterFeatureFactory factory = mockContentRewriterFeatureFactory(overrideFeature);
-    rewriter = new CSSContentRewriter(factory, DEFAULT_PROXY_BASE);
+    rewriter = new CSSContentRewriter(factory, new FakeContainerConfig());
   }
 
   public void testCssBasic() throws Exception {
Index: java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/BaseRewriterTestCase.java
===================================================================
--- java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/BaseRewriterTestCase.java	(revision 749233)
+++ java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/BaseRewriterTestCase.java	(working copy)
@@ -18,6 +18,7 @@
 package org.apache.shindig.gadgets.rewrite;
 
 import org.apache.shindig.common.PropertiesModule;
+import org.apache.shindig.common.ContainerConfig;
 import org.apache.shindig.common.uri.Uri;
 import org.apache.shindig.gadgets.EasyMockTestCase;
 import org.apache.shindig.gadgets.Gadget;
@@ -28,15 +29,26 @@
 import org.apache.shindig.gadgets.http.HttpResponseBuilder;
 import org.apache.shindig.gadgets.parse.GadgetHtmlParser;
 import org.apache.shindig.gadgets.parse.ParseModule;
+import org.apache.shindig.gadgets.parse.ParseModule.DOMImplementationProvider;
+import org.apache.shindig.gadgets.parse.nekohtml.NekoSimplifiedHtmlParser;
 import org.apache.shindig.gadgets.spec.GadgetSpec;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.json.JSONException;
+import org.w3c.dom.DOMImplementation;
 
+import com.google.inject.AbstractModule;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
+import com.google.common.collect.Maps;
 
 import org.apache.commons.lang.StringUtils;
 
 import java.net.URI;
 import java.util.Set;
+import java.util.Map;
+import java.util.Collection;
+import java.util.Arrays;
 
 /**
  * Base class for testing content rewriting functionality
@@ -45,6 +57,7 @@
   public static final Uri SPEC_URL = Uri.parse("http://www.example.org/dir/g.xml");
   public static final String DEFAULT_PROXY_BASE = "http://www.test.com/dir/proxy?url=";
   public static final String DEFAULT_CONCAT_BASE = "http://www.test.com/dir/concat?";
+  public static final String DEFAULT_CONTAINER = "shindig";
 
   protected Set<String> tags;
   protected ContentRewriterFeature defaultRewriterFeature;
@@ -57,19 +70,28 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    rewriterFeatureFactory = new ContentRewriterFeatureFactory(null, ".*", "", "HTTP",
-        "embed,img,script,link,style");
-    defaultRewriterFeature = rewriterFeatureFactory.getDefault();
+    rewriterFeatureFactory = new ContentRewriterFeatureFactory(null, new FakeContainerConfig());
+    defaultRewriterFeature = rewriterFeatureFactory.getDefault(DEFAULT_CONTAINER);
     tags = defaultRewriterFeature.getIncludedTags();
     defaultLinkRewriter = new ProxyingLinkRewriter(
         SPEC_URL,
         defaultRewriterFeature,
         DEFAULT_PROXY_BASE);
-    injector = Guice.createInjector(new ParseModule(), new PropertiesModule());
+    injector = Guice.createInjector(new ConfigModule(), new ParseModule(), new PropertiesModule());
     parser = injector.getInstance(GadgetHtmlParser.class);
     fakeResponse = new HttpResponseBuilder().setHeader("Content-Type", "unknown")
         .setResponse(new byte[]{ (byte)0xFE, (byte)0xFF}).create();
   }
+  
+  public class ConfigModule extends AbstractModule {
+    /**
+     * {@InheritDoc}
+     */
+    @Override
+    protected void configure() {
+      bind(ContainerConfig.class).to(FakeContainerConfig.class);
+    }
+  }
 
   public static GadgetSpec createSpecWithRewrite(String include, String exclude, String expires,
       Set<String> tags) throws GadgetException {
@@ -140,12 +162,12 @@
     private final ContentRewriterFeature feature;
 
     public FakeRewriterFeatureFactory(ContentRewriterFeature feature) {
-      super(null, ".*", "", "HTTP", "");
+      super(null, new FakeContainerConfig());
       this.feature = feature;
     }
 
     @Override
-    public ContentRewriterFeature get(GadgetSpec spec) {
+    public ContentRewriterFeature get(GadgetSpec spec, String container) {
       return feature;
     }
 
@@ -154,4 +176,46 @@
       return feature;
     }
   }
+
+  protected static class FakeContainerConfig implements ContainerConfig {
+    private final Map<String, String> properties = Maps.newHashMap();
+
+    public String get(String container, String property) {
+      return properties.get(property);
+    }
+
+    public Collection<String> getContainers() {
+      return null;
+    }
+
+    public Object getJson(String container, String parameter) {
+      return null;
+    }
+
+    public JSONArray getJsonArray(String container, String parameter) {
+      return null;
+    }
+
+    public JSONObject getJsonObject(String container, String parameter) {
+      if (parameter.equals("gadgets.content-rewrite")) {
+        try {
+        JSONObject jsonObject = new JSONObject();
+        JSONArray tags = new JSONArray();
+        tags.put("embed");
+        tags.put("img");
+        tags.put("script");
+        tags.put("link");
+        tags.put("style");
+        jsonObject.put("include-tags", tags);
+        jsonObject.put("include-urls", ".*");
+        jsonObject.put("exclude-urls", "");
+        jsonObject.put("expires", "HTTP");
+        jsonObject.put("proxy-url", "http://www.test.com/dir/proxy?url=");
+        jsonObject.put("concat-url", "http://www.test.com/dir/concat?");
+        return jsonObject;
+        } catch (JSONException e) {}
+      }
+      return null;
+    }
+  }
 }
Index: java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/JsonRpcHandler.java
===================================================================
--- java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/JsonRpcHandler.java	(revision 749233)
+++ java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/JsonRpcHandler.java	(working copy)
@@ -208,7 +208,8 @@
                   .put("showInDirectory", prefs.getShowInDirectory())
                   .put("singleton", prefs.getSingleton())
                   .put("scaling", prefs.getScaling())
-                  .put("scrolling", prefs.getScrolling());
+                  .put("scrolling", prefs.getScrolling())
+                  .put("description", prefs.getDescription());
         return gadgetJson;
       } catch (ProcessingException e) {
         throw new RpcException(context, e);
Index: java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java
===================================================================
--- java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java	(revision 749233)
+++ java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java	(working copy)
@@ -53,7 +53,7 @@
 
   private static final Set<String> DISALLOWED_RESPONSE_HEADERS = ImmutableSet.of(
       "set-cookie", "content-length", "content-encoding", "etag", "last-modified" ,"accept-ranges",
-      "vary", "expires", "date", "pragma", "cache-control"
+      "vary", "expires", "date", "pragma", "cache-control", "transfer-encoding"
   );
 
   private final HttpFetcher fetcher;
Index: java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/lexer/DefaultContentRewriter.java
===================================================================
--- java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/lexer/DefaultContentRewriter.java	(revision 749233)
+++ java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/lexer/DefaultContentRewriter.java	(working copy)
@@ -18,6 +18,7 @@
 package org.apache.shindig.gadgets.rewrite.lexer;
 
 import org.apache.shindig.common.uri.Uri;
+import org.apache.shindig.common.ContainerConfig;
 import org.apache.shindig.gadgets.Gadget;
 import org.apache.shindig.gadgets.GadgetException;
 import org.apache.shindig.gadgets.GadgetSpecFactory;
@@ -32,6 +33,9 @@
 import org.apache.shindig.gadgets.rewrite.RewriterResults;
 import org.apache.shindig.gadgets.spec.GadgetSpec;
 import org.apache.shindig.gadgets.spec.View;
+import org.json.JSONObject;
+import org.json.JSONException;
+import org.json.JSONArray;
 
 import com.google.common.collect.Sets;
 import com.google.common.collect.Maps;
@@ -59,39 +63,22 @@
 
   private final GadgetSpecFactory specFactory;
 
-  private final String includeUrls;
+  private final ContainerConfig config;
 
-  private final String excludeUrls;
+  static final String CONTENT_REWRITE_KEY = "gadgets.content-rewrite";
+  static final String INCLUDE_TAGS_KEY = "include-tags";
+  static final String INCLUDE_URLS_KEY = "include-urls";
+  static final String EXCLUDE_TAGS_KEY = "exclude-urls";
+  static final String PROXY_URL_KEY = "proxy-url";
+  static final String CONCAT_URL_KEY = "concat-url";
+  static final String EXPIRES_KEY = "expires";
 
-  private final String expires;
-
-  private final Set<String> includeTags;
-
-  private final String proxyUrl;
-
-  private final String concatUrl;
-
-  @Inject
+    @Inject
   public DefaultContentRewriter(
       GadgetSpecFactory specFactory,
-      @Named("shindig.content-rewrite.include-urls")String includeUrls,
-      @Named("shindig.content-rewrite.exclude-urls")String excludeUrls,
-      @Named("shindig.content-rewrite.expires")String expires,
-      @Named("shindig.content-rewrite.include-tags")String includeTags,
-      @Named("shindig.content-rewrite.proxy-url")String proxyUrl,
-      @Named("shindig.content-rewrite.concat-url")String concatUrl) {
+      ContainerConfig config) {
     this.specFactory = specFactory;
-    this.includeUrls = includeUrls;
-    this.excludeUrls = excludeUrls;
-    this.expires = expires;
-    this.proxyUrl = proxyUrl;
-    this.concatUrl = concatUrl;
-    this.includeTags = Sets.newHashSet();
-    for (String s : includeTags.split(",")) {
-      if (s != null && s.trim().length() > 0) {
-        this.includeTags.add(s.trim().toLowerCase());
-      }
-    }
+    this.config = config;
   }
 
   public RewriterResults rewrite(HttpRequest request, HttpResponse original,
@@ -108,7 +95,11 @@
       if (request.getGadget() != null) {
         spec = specFactory.getGadgetSpec(request.getGadget().toJavaUri(), false);
       }
-      if (rewrite(spec, request.getUri(), content, mimeType, output)) {
+      if (rewrite(spec, request.getUri(),
+                  content,
+                  mimeType,
+                  output,
+                  request.getContainer())) {
         content.setContent(new String(baos.toByteArray()));
         return RewriterResults.cacheableIndefinitely();
       }
@@ -128,30 +119,46 @@
     if (view != null && view.getHref() != null) {
       base = view.getHref();
     }
-    if (rewrite(spec, base, content, "text/html", sw)) {
+    if (rewrite(spec, base, content, "text/html", sw, gadget.getContext().getContainer())) {
       content.setContent(sw.toString());
       return RewriterResults.cacheableIndefinitely();
     }
     return null;
   }
 
-  private boolean rewrite(GadgetSpec spec, Uri source, MutableContent mc, String mimeType, Writer w) {
+  private boolean rewrite(GadgetSpec spec, Uri source, MutableContent mc, String mimeType, Writer w, String container) {
     // Dont rewrite content if the spec is unavailable
     if (spec == null) {
       return false;
     }
 
-    ContentRewriterFeature rewriterFeature
-        = new ContentRewriterFeature(spec, includeUrls, excludeUrls, expires, includeTags);
+    JSONObject contentRewrite = config.getJsonObject(container, CONTENT_REWRITE_KEY);
 
+    ContentRewriterFeature rewriterFeature;
+    try {
+      JSONArray jsonTags = contentRewrite.getJSONArray(INCLUDE_TAGS_KEY);
+      Set<String> tags = new HashSet<String>();
+      for (int i = 0, j = jsonTags.length(); i < j; ++i) {
+        tags.add(jsonTags.getString(i).toLowerCase());
+      }
+
+      rewriterFeature = new ContentRewriterFeature(spec,
+          contentRewrite.getString(INCLUDE_URLS_KEY),
+          contentRewrite.getString(EXCLUDE_TAGS_KEY),
+          contentRewrite.getString(EXPIRES_KEY),
+          tags);
+    } catch (JSONException e) {
+      return false;
+    }
+
     if (!rewriterFeature.isRewriteEnabled()) {
       return false;
     }
     if (isHTML(mimeType)) {
       Map<String, HtmlTagTransformer> transformerMap = Maps.newHashMap();
 
-      if (getProxyUrl() != null) {
-        LinkRewriter linkRewriter = createLinkRewriter(spec, rewriterFeature);
+      if (getProxyUrl(container) != null) {
+        LinkRewriter linkRewriter = createLinkRewriter(spec, rewriterFeature, container);
         LinkingTagRewriter rewriter = new LinkingTagRewriter(
             linkRewriter,
             source);
@@ -164,16 +171,15 @@
           transformerMap.put("style", new StyleTagRewriter(source, linkRewriter));
         }
       }
-      if (getConcatUrl() != null && rewriterFeature.getIncludedTags().contains("script")) {
+      if (getConcatUrl(container) != null && rewriterFeature.getIncludedTags().contains("script")) {
         transformerMap
-            .put("script", new JavascriptTagMerger(spec, rewriterFeature, getConcatUrl(), source));
+            .put("script", new JavascriptTagMerger(spec, rewriterFeature, getConcatUrl(container), source));
       }
       HtmlRewriter.rewrite(new StringReader(mc.getContent()), source, transformerMap, w);
       return true;
     } else if (isCSS(mimeType)) {
-      if (getProxyUrl() != null) {
-        CssRewriter.rewrite(new StringReader(mc.getContent()), source,
-            createLinkRewriter(spec, rewriterFeature), w, false);
+      if (getProxyUrl(container) != null) {
+        CssRewriter.rewrite(new StringReader(mc.getContent()), source, createLinkRewriter(spec, rewriterFeature, container), w, false);
         return true;
       } else {
         return false;
@@ -190,18 +196,26 @@
     return mime != null && (mime.toLowerCase().contains("css"));
   }
 
-  // TODO: This needs to be per-container
-  protected String getProxyUrl() {
-    return proxyUrl;
+  protected String getProxyUrl(String container) {
+    JSONObject contentRewrite = config.getJsonObject(container, CONTENT_REWRITE_KEY);
+    try {
+      return contentRewrite.getString(PROXY_URL_KEY);
+    } catch (JSONException e) {
+      return null;
+    }
   }
 
-  // TODO: This needs to be per-container
-  protected String getConcatUrl() {
-    return concatUrl;
+  protected String getConcatUrl(String container) {
+    JSONObject contentRewrite = config.getJsonObject(container, CONTENT_REWRITE_KEY);
+    try {
+      return contentRewrite.getString(CONCAT_URL_KEY);
+    } catch (JSONException e) {
+      return null;
+    }
   }
 
   protected LinkRewriter createLinkRewriter(GadgetSpec spec,
-      ContentRewriterFeature rewriterFeature) {
-    return new ProxyingLinkRewriter(spec.getUrl(), rewriterFeature, getProxyUrl());
+      ContentRewriterFeature rewriterFeature, String container) {
+    return new ProxyingLinkRewriter(spec.getUrl(), rewriterFeature, getProxyUrl(container));
   }
 }
Index: java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/ContentRewriterFeatureFactory.java
===================================================================
--- java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/ContentRewriterFeatureFactory.java	(revision 749233)
+++ java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/ContentRewriterFeatureFactory.java	(working copy)
@@ -18,10 +18,14 @@
 package org.apache.shindig.gadgets.rewrite;
 
 import org.apache.shindig.common.uri.Uri;
+import org.apache.shindig.common.ContainerConfig;
 import org.apache.shindig.gadgets.GadgetException;
 import org.apache.shindig.gadgets.GadgetSpecFactory;
 import org.apache.shindig.gadgets.http.HttpRequest;
 import org.apache.shindig.gadgets.spec.GadgetSpec;
+import org.json.JSONObject;
+import org.json.JSONArray;
+import org.json.JSONException;
 
 import com.google.common.collect.Sets;
 
@@ -32,6 +36,8 @@
 import java.net.URI;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.HashMap;
+import java.util.Map;
 
 /**
  * Factory for content rewriter features
@@ -40,36 +46,33 @@
 public class ContentRewriterFeatureFactory {
 
   private final GadgetSpecFactory specFactory;
-  private final String includeUrls;
-  private final String excludeUrls;
-  private final String expires;
-  private final Set<String> includeTags;
 
-  private ContentRewriterFeature defaultFeature;
+//  private ContentRewriterFeature defaultFeature;
 
+  private Map<String, ContentRewriterFeature> contentRewriters;
+
+  static final String CONTENT_REWRITE_KEY = "gadgets.content-rewrite";
+  static final String INCLUDE_TAGS_KEY = "include-tags";
+  static final String INCLUDE_URLS_KEY = "include-urls";
+  static final String EXCLUDE_TAGS_KEY = "exclude-urls";
+  static final String EXPIRES_KEY = "expires";
+
+  private final ContainerConfig config;
+
   @Inject
   public ContentRewriterFeatureFactory(
       GadgetSpecFactory specFactory,
-      @Named("shindig.content-rewrite.include-urls")String includeUrls,
-      @Named("shindig.content-rewrite.exclude-urls")String excludeUrls,
-      @Named("shindig.content-rewrite.expires")String expires,
-      @Named("shindig.content-rewrite.include-tags")String includeTags) {
+      ContainerConfig config) {
+    this.config = config;
     this.specFactory = specFactory;
-    this.includeUrls = includeUrls;
-    this.excludeUrls = excludeUrls;
-    this.expires = expires;
-    this.includeTags = Sets.newHashSet();
-    for (String s : includeTags.split(",")) {
-      if (s != null && s.trim().length() > 0) {
-        this.includeTags.add(s.trim().toLowerCase());
-      }
-    }
-    defaultFeature = new ContentRewriterFeature(null, includeUrls, excludeUrls, expires,
-        this.includeTags);
+    contentRewriters = new HashMap<String, ContentRewriterFeature>();
   }
 
-  public ContentRewriterFeature getDefault() {
-    return defaultFeature;
+  public ContentRewriterFeature getDefault(String container) {
+    if (!contentRewriters.containsKey(container)) {
+      contentRewriters.put(container, createContentRewriterFeature(null, container));
+    }
+    return contentRewriters.get(container);
   }
 
   public ContentRewriterFeature get(HttpRequest request) {
@@ -80,21 +83,39 @@
       try {
         spec = specFactory.getGadgetSpec(gadgetJavaUri, false);
         if (spec != null) {
-          return get(spec);
+          return get(spec, request.getContainer());
         }
-      } catch (GadgetException ge) {
-        return defaultFeature;
-      }
+      } catch (GadgetException ge) { }
     }
-    return defaultFeature;
+    return getDefault(request.getContainer());
   }
 
-  public ContentRewriterFeature get(GadgetSpec spec) {
+  private ContentRewriterFeature createContentRewriterFeature(GadgetSpec spec, String container) {
+    try {
+    JSONObject contentRewrite = config.getJsonObject(container, CONTENT_REWRITE_KEY);
+
+    JSONArray jsonTags = contentRewrite.getJSONArray(INCLUDE_TAGS_KEY);
+    Set<String> tags = new HashSet<String>();
+    for (int i = 0, j = jsonTags.length(); i < j; ++i) {
+      tags.add(jsonTags.getString(i).toLowerCase());
+    }
+
+    return new ContentRewriterFeature(spec,
+        contentRewrite.getString(INCLUDE_URLS_KEY),
+        contentRewrite.getString(EXCLUDE_TAGS_KEY),
+        contentRewrite.getString(EXPIRES_KEY),
+        tags);
+    } catch(JSONException e){
+      return null;
+    }
+  }
+
+
+  public ContentRewriterFeature get(GadgetSpec spec, String container) {
     ContentRewriterFeature rewriterFeature =
         (ContentRewriterFeature)spec.getAttribute("content-rewriter");
     if (rewriterFeature != null) return rewriterFeature;
-    rewriterFeature
-        = new ContentRewriterFeature(spec, includeUrls, excludeUrls, expires, includeTags);
+    rewriterFeature = createContentRewriterFeature(spec,  container);
     spec.setAttribute("content-rewriter", rewriterFeature);
     return rewriterFeature;
   }
Index: java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/CSSContentRewriter.java
===================================================================
--- java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/CSSContentRewriter.java	(revision 749233)
+++ java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/CSSContentRewriter.java	(working copy)
@@ -18,9 +18,12 @@
 package org.apache.shindig.gadgets.rewrite;
 
 import org.apache.shindig.common.uri.Uri;
+import org.apache.shindig.common.ContainerConfig;
 import org.apache.shindig.gadgets.Gadget;
 import org.apache.shindig.gadgets.http.HttpRequest;
 import org.apache.shindig.gadgets.http.HttpResponse;
+import org.json.JSONObject;
+import org.json.JSONException;
 
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
@@ -31,13 +34,18 @@
 public class CSSContentRewriter implements ContentRewriter {
 
   private final ContentRewriterFeatureFactory rewriterFeatureFactory;
-  private final String proxyBaseNoGadget;
 
+  private final ContainerConfig config;
+
+  static final String CONTENT_REWRITE_KEY = "gadgets.content-rewrite";
+  static final String PROXY_URL_KEY = "proxy-url";
+
+
   @Inject
   public CSSContentRewriter(ContentRewriterFeatureFactory rewriterFeatureFactory,
-      @Named("shindig.content-rewrite.proxy-url")String proxyBaseNoGadget) {
+      ContainerConfig config) {
     this.rewriterFeatureFactory = rewriterFeatureFactory;
-    this.proxyBaseNoGadget = proxyBaseNoGadget;
+    this.config = config;
   }
 
   public RewriterResults rewrite(Gadget gadget, MutableContent content) {
@@ -51,13 +59,18 @@
     }
     ContentRewriterFeature feature = rewriterFeatureFactory.get(request);
     content.setContent(CssRewriter.rewrite(content.getContent(), request.getUri(),
-        createLinkRewriter(request.getGadget(), feature)));
+        createLinkRewriter(request.getGadget(), feature, request.getContainer())));
 
     return RewriterResults.cacheableIndefinitely();
   }
 
-  protected LinkRewriter createLinkRewriter(Uri gadgetUri, ContentRewriterFeature feature) {
-    return new ProxyingLinkRewriter(gadgetUri, feature, proxyBaseNoGadget);
+  protected LinkRewriter createLinkRewriter(Uri gadgetUri, ContentRewriterFeature feature, String container) {
+    JSONObject contentRewrite = config.getJsonObject(container, CONTENT_REWRITE_KEY);
+    try {
+      return new ProxyingLinkRewriter(gadgetUri, feature, contentRewrite.getString(PROXY_URL_KEY));
+    } catch (JSONException e) {
+      return null;
+    }
   }
 }
 
Index: java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriter.java
===================================================================
--- java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriter.java	(revision 749233)
+++ java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/HTMLContentRewriter.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.apache.shindig.common.uri.Uri;
 import org.apache.shindig.common.util.Utf8UrlCoder;
+import org.apache.shindig.common.ContainerConfig;
 import org.apache.shindig.common.xml.DomUtil;
 import org.apache.shindig.gadgets.Gadget;
 import org.apache.shindig.gadgets.http.HttpRequest;
@@ -36,15 +37,17 @@
 import com.google.common.collect.Sets;
 
 import com.google.inject.Inject;
-import com.google.inject.name.Named;
 
 import org.w3c.dom.Element;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
+import org.json.JSONObject;
+import org.json.JSONException;
 
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.UnsupportedEncodingException;
+import java.net.URI;
 import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.LinkedHashSet;
@@ -62,48 +65,51 @@
  */
 public class HTMLContentRewriter  implements ContentRewriter {
   private final static int MAX_URL_LENGTH = 1500;
+  private static final String DEFAULT_CONCAT_URL_BASE = "/gadgets/concat?";
 
+  static final String CONTENT_REWRITE_KEY = "gadgets.content-rewrite";
+  static final String PROXY_URL_KEY = "proxy-url";
+  static final String CONCAT_URL_KEY = "concat-url";
+
   public final static Set<String> TAGS = ImmutableSet.of("img", "embed", "link", "script", "style");
-
+                                                                                       
   private final static ImmutableMap<String, ImmutableSet<String>> LINKING_TAG_ATTRS = ImmutableMap.of(
       "img", ImmutableSet.of("src"),
       "embed", ImmutableSet.of("src")
   );
 
   private final ContentRewriterFeatureFactory rewriterFeatureFactory;
-  private final String proxyBaseNoGadget;
-  private final String concatBaseNoGadget;
+  private final ContainerConfig config;
 
   @Inject
   public HTMLContentRewriter(ContentRewriterFeatureFactory rewriterFeatureFactory,
-      @Named("shindig.content-rewrite.proxy-url")String proxyBaseNoGadget,
-      @Named("shindig.content-rewrite.concat-url")String concatBaseNoGadget) {
+      ContainerConfig config) {
     this.rewriterFeatureFactory = rewriterFeatureFactory;
-    this.concatBaseNoGadget = concatBaseNoGadget;
-    this.proxyBaseNoGadget = proxyBaseNoGadget;
+    this.config = config;
   }
 
   public RewriterResults rewrite(HttpRequest request, HttpResponse original,
       MutableContent content) {
     if (RewriterUtils.isHtml(request, original)) {
       ContentRewriterFeature feature = rewriterFeatureFactory.get(request);
-      return rewriteImpl(feature, request.getGadget(), request.getUri(), content);
+      return rewriteImpl(feature, request.getGadget(), request.getUri(), content, request.getContainer());
     }
     return null;
   }
 
   public RewriterResults rewrite(Gadget gadget, MutableContent content) {
-    ContentRewriterFeature feature = rewriterFeatureFactory.get(gadget.getSpec());
+    String container = gadget.getContext().getContainer();
+    ContentRewriterFeature feature = rewriterFeatureFactory.get(gadget.getSpec(), container);
     Uri contentBase = gadget.getSpec().getUrl();
     View view = gadget.getCurrentView();
     if (view != null && view.getHref() != null) {
       contentBase = view.getHref();
     }
-    return rewriteImpl(feature, gadget.getSpec().getUrl(), contentBase, content);
+    return rewriteImpl(feature, gadget.getSpec().getUrl(), contentBase, content, container);
   }
 
   protected RewriterResults rewriteImpl(ContentRewriterFeature feature, Uri gadgetUri,
-                                        Uri contentBase, MutableContent content) {
+                                        Uri contentBase, MutableContent content, String container) {
     if (!feature.isRewriteEnabled() || content.getDocument() == null) {
       return null;
     }
@@ -112,7 +118,7 @@
     List<Element> tagList =
         DomUtil.getElementsByTagNameCaseInsensitive(content.getDocument(), TAGS);
 
-    Element head = (Element)DomUtil.getFirstNamedChildNode(
+    Element head = (Element) DomUtil.getFirstNamedChildNode(
         content.getDocument().getDocumentElement(), "head");
 
     boolean mutated = false;
@@ -121,11 +127,11 @@
     // 1st step. Rewrite links in all embedded style tags. Convert @import statements into
     // links and add them to the tag list.
     // Move all style and link tags into head and concat the link tags
-    mutated = rewriteStyleTags(head, tagList, feature, gadgetUri, contentBase);
+    mutated = rewriteStyleTags(head, tagList, feature, gadgetUri, contentBase, container);
     // Concat script links
-    mutated |= rewriteJsTags(tagList, feature, gadgetUri, contentBase);
+    mutated |= rewriteJsTags(tagList, feature, gadgetUri, contentBase, container);
     // Rewrite links in images, embeds etc
-    mutated |= rewriteContentReferences(tagList, feature, gadgetUri, contentBase);
+    mutated |= rewriteContentReferences(tagList, feature, gadgetUri, contentBase, container);
 
     if (mutated) {
       MutableContent.notifyEdit(content.getDocument());
@@ -135,7 +141,7 @@
   }
 
   protected boolean rewriteStyleTags(Element head, List<Element> elementList,
-      ContentRewriterFeature feature, Uri gadgetUri, Uri contentBase) {
+                                     ContentRewriterFeature feature, Uri gadgetUri, Uri contentBase, String container) {
     if (!feature.getIncludedTags().contains("style")) {
       return false;
     }
@@ -149,7 +155,7 @@
       }
     }));
 
-    LinkRewriter linkRewriter = createLinkRewriter(gadgetUri, feature);
+    LinkRewriter linkRewriter = createLinkRewriter(gadgetUri, feature, container);
 
     for (Element styleTag : styleTags) {
       mutated |= true;
@@ -191,18 +197,34 @@
           }
         }));
 
-    String concatBase = getConcatBase(gadgetUri, feature, "text/css");
+    String concatBase = getConcatBase(gadgetUri.toJavaUri(), feature,
+      "text/css", container);
 
     concatenateTags(feature, linkTags, concatBase, contentBase, "href");
 
     return mutated;
   }
 
-  protected LinkRewriter createLinkRewriter(Uri gadgetUri, ContentRewriterFeature feature) {
-    return new ProxyingLinkRewriter(gadgetUri, feature, proxyBaseNoGadget);
+  protected LinkRewriter createLinkRewriter(Uri gadgetUri, ContentRewriterFeature feature, String container) {
+    JSONObject contentRewrite = config.getJsonObject(container, CONTENT_REWRITE_KEY);
+    try {
+      String proxyBaseNoGadget = contentRewrite.getString(PROXY_URL_KEY);
+      return new ProxyingLinkRewriter(gadgetUri, feature, proxyBaseNoGadget);
+    } catch (JSONException e) {
+      return null;
+    }
   }
 
-  protected String getConcatBase(Uri gadgetUri, ContentRewriterFeature feature, String mimeType) {
+  protected String getConcatBase(URI gadgetUri, ContentRewriterFeature feature, String mimeType, String container) {
+    JSONObject contentRewrite = config.getJsonObject(container, CONTENT_REWRITE_KEY);
+
+    String concatBaseNoGadget;
+    try {
+      concatBaseNoGadget = contentRewrite.getString(CONCAT_URL_KEY);
+    } catch (JSONException e) {
+      concatBaseNoGadget = DEFAULT_CONCAT_URL_BASE;
+    }
+
     return concatBaseNoGadget +
            ProxyBase.REWRITE_MIME_TYPE_PARAM +
            "=" + mimeType +
@@ -211,7 +233,7 @@
   }
 
   protected boolean rewriteJsTags(List<Element> elementList, ContentRewriterFeature feature,
-      Uri gadgetUri, Uri contentBase) {
+                                  Uri gadgetUri, Uri contentBase, String container) {
     if (!feature.getIncludedTags().contains("script")) {
       return false;
     }
@@ -225,7 +247,7 @@
       }
     }));
 
-    String concatBase = getConcatBase(gadgetUri, feature, "text/javascript");
+    String concatBase = getConcatBase(gadgetUri.toJavaUri(), feature, "text/javascript", container);
     List<Element> concatenateable = Lists.newArrayList();
     for (int i = 0; i < scriptTags.size(); i++) {
       Element scriptTag = scriptTags.get(i);
@@ -252,10 +274,11 @@
     return mutated;
   }
 
-  protected boolean rewriteContentReferences(List<Element> elementList,
-      ContentRewriterFeature feature, Uri gadgetUri, Uri contentBase) {
+  protected boolean rewriteContentReferences(List<Element> elementList, ContentRewriterFeature feature,
+                                             Uri gadgetUri, Uri contentBase, String container) {
+
     boolean mutated = false;
-    LinkRewriter rewriter = createLinkRewriter(gadgetUri, feature);
+    LinkRewriter rewriter = createLinkRewriter(gadgetUri, feature, container);
 
     final Set<String> tagNames = Sets.intersection(LINKING_TAG_ATTRS.keySet(), feature.getIncludedTags());
 
Index: java/gadgets/pom.xml
===================================================================
--- java/gadgets/pom.xml	(revision 749233)
+++ java/gadgets/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-parent</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
Index: pom.xml
===================================================================
--- pom.xml	(revision 749233)
+++ pom.xml	(working copy)
@@ -28,7 +28,7 @@
 
   <groupId>org.apache.shindig</groupId>
   <artifactId>shindig-project</artifactId>
-  <version>1.0.0-incubating-SNAPSHOT</version>
+  <version>1.0.0-incubating-r749233</version>
   <packaging>pom</packaging>
 
   <name>Apache Shindig Project</name>
Index: config/container.js
===================================================================
--- config/container.js	(revision 749233)
+++ config/container.js	(working copy)
@@ -85,6 +85,17 @@
 
 // Only configuration for required features will be used.
 // See individual feature.xml files for configuration details.
+
+"gadgets.content-rewrite" : {
+"include-urls": ".*",
+"exclude-urls": "",
+"include-tags": ["link", "script", "embed", "img", "style"],
+"expires": "86400",
+"proxy-url": "http://localhost:8080/gadgets/proxy?url=",
+"concat-url": "http://localhost:8080/gadgets/concat?"
+},
+
+
 "gadgets.features" : {
   "core.io" : {
     // Note: /proxy is an open proxy. Be careful how you expose this!
Index: features/analytics/feature.xml
===================================================================
--- features/analytics/feature.xml	(revision 749233)
+++ features/analytics/feature.xml	(working copy)
@@ -20,7 +20,7 @@
   <name>analytics</name>
   <dependency>core</dependency>
   <gadget>
-    <script src="http://www.google-analytics.com/urchin.js"/>
-    <script src="http://www.google.com/ig/lib/libanalytics.js"/>
+    <!--script src="http://www.google.com/ig/lib/liburchin.js"/>
+    <script src="http://www.google.com/ig/lib/libanalytics.js"/-->
   </gadget>
 </feature>
Index: features/pom.xml
===================================================================
--- features/pom.xml	(revision 749233)
+++ features/pom.xml	(working copy)
@@ -22,7 +22,7 @@
   <parent>
     <groupId>org.apache.shindig</groupId>
     <artifactId>shindig-parent</artifactId>
-    <version>1.0.0-incubating-SNAPSHOT</version>
+    <version>1.0.0-incubating-r749233</version>
     <relativePath>../java/pom.xml</relativePath>
   </parent>
 
Index: features/setprefs/setprefs.js
===================================================================
--- features/setprefs/setprefs.js	(revision 749233)
+++ features/setprefs/setprefs.js	(working copy)
@@ -63,6 +63,6 @@
   for (var i = 0, j = val.length; i < j; ++i) {
     val[i] = val[i].replace(/\|/g, "%7C");
   }
-  gadgets.Prefs.setInternal_(key, val.join('|'));
+  this.set(key, val.join('|'));  
 };
 
Index: features/opensocial-current/feature.xml
===================================================================
--- features/opensocial-current/feature.xml	(revision 749233)
+++ features/opensocial-current/feature.xml	(working copy)
@@ -20,7 +20,7 @@
 <feature>
   <name>opensocial-0.8</name>
   <dependency>opensocial-jsonrpc</dependency>
-  <dependency>opensocial-rest</dependency>
+  <!-- dependency>opensocial-rest</dependency -->
   <!-- <dependency>caja</dependency> -->
   <!-- Must include the "caja" feature to display samplecontainer -->
   <!-- gadgets when "use caja" is checked -->
