Index: component/web/src/main/java/org/exoplatform/web/application/javascript/JavascriptConfigService.java
===================================================================
--- component/web/src/main/java/org/exoplatform/web/application/javascript/JavascriptConfigService.java	(revision 61561)
+++ component/web/src/main/java/org/exoplatform/web/application/javascript/JavascriptConfigService.java	(working copy)
@@ -22,6 +22,7 @@
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Date;
 import java.util.HashMap;
 
 import javax.servlet.ServletContext;
@@ -32,6 +33,8 @@
   private Collection<String> availableScriptsPaths_;
 
   private String mergedJavascript = "";
+  
+  private long lastModified = Long.MAX_VALUE;
 
   private HashMap<String,String> extendedJavascripts ;
 
@@ -114,10 +117,16 @@
       } catch (Exception e) {
         e.printStackTrace();
       }
+//    Remove miliseconds because string of date retrieve from Http header doesn't have miliseconds 
+      lastModified = (new Date().getTime() / 1000) * 1000;
     }
     return jsStream_.toByteArray();
   }
-
+  
+  public long getLastModified() {
+    return lastModified;
+  }
+  
   public boolean isModuleLoaded(CharSequence module) {
     return getAvailableScripts().contains(module);
   }
Index: webui/portal/src/main/java/org/exoplatform/portal/application/Image.java
===================================================================
--- webui/portal/src/main/java/org/exoplatform/portal/application/Image.java	(revision 61561)
+++ webui/portal/src/main/java/org/exoplatform/portal/application/Image.java	(working copy)
@@ -16,6 +16,8 @@
  */
 package org.exoplatform.portal.application;
 
+import java.util.Date;
+
 /**
  * @author <a href="mailto:julien.viet@exoplatform.com">Julien Viet</a>
  * @version $Revision$
@@ -24,9 +26,16 @@
 
   final ImageType type;
   final byte[] bytes;
+  final long lastModified;
 
   public Image(ImageType type, byte[] bytes) {
     this.type = type;
     this.bytes = bytes;
+//  Remove miliseconds because string of date retrieve from Http header doesn't have miliseconds 
+    lastModified = (new Date().getTime() / 1000) * 1000;
   }
+  
+  public long getLastModified() {
+    return lastModified;
+  }
 }
Index: webui/portal/src/main/java/org/exoplatform/portal/application/ResourceRequestFilter.java
===================================================================
--- webui/portal/src/main/java/org/exoplatform/portal/application/ResourceRequestFilter.java	(revision 61561)
+++ webui/portal/src/main/java/org/exoplatform/portal/application/ResourceRequestFilter.java	(working copy)
@@ -20,7 +20,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.Writer;
 import java.net.URLDecoder;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ConcurrentHashMap;
@@ -54,7 +53,6 @@
 import org.exoplatform.commons.utils.CharsetTextEncoder;
 import org.exoplatform.commons.utils.TableCharEncoder;
 import org.exoplatform.commons.utils.CharsetCharEncoder;
-import org.exoplatform.commons.utils.PortalPrinter;
 
 public class ResourceRequestFilter implements Filter  {
   
@@ -67,7 +65,11 @@
   private ConcurrentMap<String, FutureTask<Image>> mirroredImageCache = new ConcurrentHashMap<String, FutureTask<Image>>();
 
   private ExoCache cssCache = new ConcurrentFIFOExoCache(50);
-
+  
+  public static final String IF_MODIFIED_SINCE     = "If-Modified-Since";
+  
+  public static final String LAST_MODIFIED     = "Last-Modified";    
+  
   public void init(FilterConfig filterConfig) {
     cfg = filterConfig;
     log.info("Cache eXo Resource at client: " + !PropertyManager.isDevelopping());
@@ -81,10 +83,18 @@
     final String uri = URLDecoder.decode(httpRequest.getRequestURI(),"UTF-8");
     final HttpServletResponse httpResponse = (HttpServletResponse)  response ;
     ExoContainer portalContainer = ExoContainerContext.getCurrentContainer();
-    SkinService skinService = (SkinService) portalContainer.getComponentInstanceOfType(SkinService.class);
+    final SkinService skinService = (SkinService) portalContainer.getComponentInstanceOfType(SkinService.class);
+    long ifModifedSince = httpRequest.getDateHeader(IF_MODIFIED_SINCE);
 
     //
     if(uri.endsWith(".css")) {
+      //Check if cached resource has not been modifed, return 304 code      
+      long cssLastModified = skinService.getLastModified(uri);        
+      if (isNotModified(ifModifedSince, cssLastModified, httpResponse)) {
+        httpResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
+        return;      
+      }
+      
       final OutputStream out = response.getOutputStream();
       final Appendable app = new Appendable() {
         public Appendable append(CharSequence csq) throws IOException {
@@ -148,7 +158,10 @@
           } else {
             httpResponse.setHeader("Cache-Control", "no-cache");
           }
-        }
+          
+          long lastModified = skinService.getLastModified(uri);
+          processIfModified(lastModified, httpResponse);
+        }       
       };
 
       //
@@ -162,8 +175,8 @@
         log.error("Could not render css " + uri, e);
         httpResponse.setStatus(HttpServletResponse.SC_NOT_FOUND);
       }
-    } else {
-
+    } else {            
+      
       // Fast matching
       final int len = uri.length();
       if (len >= 7 &&
@@ -210,8 +223,17 @@
             try {
               Image img = futureImg.get();
               if (img != null) {
+                //Check if cached resource has not been modifed, return 304 code      
+                long imgLastModified = img.getLastModified();                                                
+                if (isNotModified(ifModifedSince, imgLastModified, httpResponse)) {
+                  httpResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
+                  return;
+                }
+                
                 httpResponse.setContentType(img.type.getMimeType());
                 httpResponse.setContentLength(img.bytes.length);
+                processIfModified(imgLastModified, httpResponse);
+                
                 OutputStream out = httpResponse.getOutputStream();
                 out.write(img.bytes);
                 out.close();
@@ -248,5 +270,29 @@
     }
   }
 
+  /**
+   * Add Last-Modified Http header to HttpServetResponse
+   */
+  public void processIfModified(long lastModified, HttpServletResponse httpResponse) {
+    httpResponse.setDateHeader(ResourceRequestFilter.LAST_MODIFIED, lastModified);
+  }
+
+  /**
+   * If cached resource has not changed since date in http header (If_Modified_Since), set 304 code to HttpServletResponse, return true
+   * Else return false; 
+   * @param ifModifedSince - String, and HttpHeader element
+   * @param lastModified 
+   * @param httpResponse
+   * @return
+   */
+  public boolean isNotModified(long ifModifedSince, long lastModified, HttpServletResponse httpResponse) {
+    if (!PropertyManager.isDevelopping()) {
+      if (ifModifedSince >= lastModified) {        
+        return true;
+      }
+    }
+    return false;
+  }
+
   public void destroy() { }
 }  
\ No newline at end of file
Index: webui/portal/src/main/java/org/exoplatform/portal/webui/javascript/JavascriptServlet.java
===================================================================
--- webui/portal/src/main/java/org/exoplatform/portal/webui/javascript/JavascriptServlet.java	(revision 61561)
+++ webui/portal/src/main/java/org/exoplatform/portal/webui/javascript/JavascriptServlet.java	(working copy)
@@ -2,15 +2,20 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Date;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.ServletOutputStream;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.exoplatform.commons.utils.PropertyManager;
 import org.exoplatform.container.ExoContainerContext;
+import org.exoplatform.portal.application.ResourceRequestFilter;
 import org.exoplatform.web.application.javascript.JavascriptConfigService;
 
 public class JavascriptServlet extends HttpServlet {
@@ -34,9 +39,21 @@
     JavascriptConfigService service = (JavascriptConfigService) ExoContainerContext
         .getCurrentContainer().getComponentInstanceOfType(
             JavascriptConfigService.class);
+    long lastModified = service.getLastModified();
+    long ifModifedSince = request.getDateHeader(ResourceRequestFilter.IF_MODIFIED_SINCE);
+    
     response.setContentType("application/x-javascript");
+    if (!PropertyManager.isDevelopping()) {
+      if (ifModifedSince >= lastModified) {
+        response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
+        return;
+      }
+    }
+    
     ServletOutputStream stream = response.getOutputStream();
-    stream.write(service.getMergedJavascript());
+    byte[] mergedJS = service.getMergedJavascript();
+    response.setDateHeader(ResourceRequestFilter.LAST_MODIFIED, lastModified);
+    stream.write(mergedJS);        
   }
 
 }
Index: webui/portal/src/main/java/org/exoplatform/portal/webui/skin/CachedStylesheet.java
===================================================================
--- webui/portal/src/main/java/org/exoplatform/portal/webui/skin/CachedStylesheet.java	(revision 0)
+++ webui/portal/src/main/java/org/exoplatform/portal/webui/skin/CachedStylesheet.java	(revision 0)
@@ -0,0 +1,23 @@
+package org.exoplatform.portal.webui.skin;
+
+import java.util.Date;
+
+public class CachedStylesheet {
+  private String text;
+
+  private long lastModified;
+
+  public CachedStylesheet(String text) {
+    this.text = text;
+//  Remove miliseconds because string of date retrieve from Http header doesn't have miliseconds 
+    lastModified = (new Date().getTime() / 1000) * 1000;
+  }
+
+  public String getText() {
+    return text;
+  }
+
+  public long getLastModified() {
+    return lastModified;
+  }
+}
Index: webui/portal/src/main/java/org/exoplatform/portal/webui/skin/SkinService.java
===================================================================
--- webui/portal/src/main/java/org/exoplatform/portal/webui/skin/SkinService.java	(revision 61561)
+++ webui/portal/src/main/java/org/exoplatform/portal/webui/skin/SkinService.java	(working copy)
@@ -17,6 +17,7 @@
 package org.exoplatform.portal.webui.skin;
 
 import java.util.Collection;
+import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -110,4 +111,6 @@
     String cssPath,
     ServletContext scontext,
     boolean overwrite);
+  
+  long getLastModified(String path);
 }
\ No newline at end of file
Index: webui/portal/src/main/java/org/exoplatform/portal/webui/skin/SkinServiceImpl.java
===================================================================
--- webui/portal/src/main/java/org/exoplatform/portal/webui/skin/SkinServiceImpl.java	(revision 61561)
+++ webui/portal/src/main/java/org/exoplatform/portal/webui/skin/SkinServiceImpl.java	(working copy)
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -92,8 +93,8 @@
   private final Map<SkinKey, SkinConfig> portalSkins_ ;
   private final Map<SkinKey, SkinConfig> skinConfigs_;
   private final HashSet<String> availableSkins_;
-  private final Map<String, String> ltCache;
-  private final Map<String, String> rtCache;
+  private final Map<String, CachedStylesheet> ltCache;
+  private final Map<String, CachedStylesheet> rtCache;
   private final Map<String, Set<String>> portletThemes_;
   private final MainResourceResolver mainResolver;
 
@@ -108,8 +109,8 @@
     portalSkins_ = new LinkedHashMap<SkinKey, SkinConfig>() ;
     skinConfigs_ = new LinkedHashMap<SkinKey, SkinConfig>(20);
     availableSkins_ = new HashSet<String>(5);
-    ltCache = new ConcurrentHashMap<String, String>();
-    rtCache = new ConcurrentHashMap<String, String>();
+    ltCache = new ConcurrentHashMap<String, CachedStylesheet>();
+    rtCache = new ConcurrentHashMap<String, CachedStylesheet>();
     portletThemes_ = new HashMap<String, Set<String>>();
     mainResolver = new MainResourceResolver(skinConfigs_);
   }
@@ -144,8 +145,8 @@
     if (skinConfig == null) {
       portalSkins_.put(key, new SimpleSkin(this, module, skinName, cssPath));
     }
-    ltCache.put(cssPath, cssData);
-    rtCache.put(cssPath, cssData);
+    ltCache.put(cssPath, new CachedStylesheet(cssData));
+    rtCache.put(cssPath, new CachedStylesheet(cssData));
   }
 
   public void addSkin(
@@ -185,8 +186,8 @@
     if (skinConfig == null) {
       skinConfigs_.put(key, new SimpleSkin(this, module, skinName, cssPath));
     }
-    ltCache.put(cssPath, cssData);
-    rtCache.put(cssPath, cssData);
+    ltCache.put(cssPath, new CachedStylesheet(cssData));
+    rtCache.put(cssPath, new CachedStylesheet(cssData));
   }
 
 
@@ -227,7 +228,7 @@
         }
         public void setExpiration(long seconds) {
 
-        }
+        }      
       }, cssPath);
       return sb.toString();
     }
@@ -239,7 +240,7 @@
       log.error("Error while rendering css " + cssPath, e);
       return null;
     }
-  }
+  }    
 
   public void renderCSS(ResourceRenderer renderer, String path) throws RenderingException, IOException {
     Orientation orientation = Orientation.LT;
@@ -251,31 +252,37 @@
     }
 
     // Try cache first
-    if (!PropertyManager.isDevelopping()) {
+    if (!PropertyManager.isDevelopping()) {           
 
+      //
+      Map<String, CachedStylesheet> cache = orientation == Orientation.LT ? ltCache : rtCache;
+      CachedStylesheet cachedCSS = cache.get(path);      
+      if (cachedCSS == null) {
+        StringBuilder sb = new StringBuilder();
+        processCSS(sb, path, orientation, true);        
+        cachedCSS = new CachedStylesheet(sb.toString());
+        cache.put(path, cachedCSS);
+      }
+      
       if (path.startsWith("/portal/resource")) {
         renderer.setExpiration(ONE_MONTH);
       } else {
         renderer.setExpiration(ONE_HOUR);
-      }
-
-      //
-      Map<String, String> cache = orientation == Orientation.LT ? ltCache : rtCache;
-      String css = cache.get(path);
-      if (css == null) {
-        StringBuilder sb = new StringBuilder();
-        processCSS(sb, path, orientation, true);
-        css = sb.toString();
-        cache.put(path, css);
-      }
-      renderer.getAppendable().append(css);
+      } 
+      
+      renderer.getAppendable().append(cachedCSS.getText());            
     } else {
       processCSS(renderer.getAppendable(), path, orientation, false);
     }
   }
 
   public String getMergedCSS(String cssPath) {
-    return ltCache.get(cssPath);
+    CachedStylesheet cachedCSS = ltCache.get(cssPath);
+    if (cachedCSS == null) {
+      return null;
+    } else {
+      return cachedCSS.getText();
+    }
   }
 
   public Collection<SkinConfig> getPortalSkins(String skinName) {
@@ -434,4 +441,30 @@
 	  ltCache.remove(skinId);
 	  rtCache.remove(skinId);
   }
+  
+  /**
+   * Return last modifed date of cached css
+   * Return null if cached css can not be found
+   * @param path - path must not be null
+   */
+  public long getLastModified(String path) {
+    if (path == null) {
+      throw new IllegalArgumentException("path must not be null");
+    }
+    
+    Map<String, CachedStylesheet> cache = ltCache;
+    if (path.endsWith("-lt.css")) {
+      path = path.substring(0, path.length() - "-lt.css".length()) + ".css";
+    } else if (path.endsWith("-rt.css")) {
+      path = path.substring(0, path.length() - "-rt.css".length()) + ".css";
+      cache = rtCache;
+    }
+    
+    CachedStylesheet cachedCSS = cache.get(path);
+    if (cachedCSS == null) {
+      return Long.MAX_VALUE;
+    } else {
+      return cachedCSS.getLastModified();
+    }
+  }
 }
\ No newline at end of file
